#!/usr/bin/env node

const version = '1.6';
let angularCLIVersion = 9;

const fetch = require('node-fetch');
const base64 = require('js-base64').Base64;
const { exec } = require('child_process');
const readline = require('readline');
const chalk = require('chalk');
const figlet = require('figlet');
const { performance } = require('perf_hooks');
const ora = require('ora');
fs = require('fs');

class Loading {

    spinner = null;

    constructor() { }

    startLoading(string, start) {
        if (this.spinner) {
            this.spinner.succeed();
            this.spinner = null;
            process.stdout.write('\n');
        }
        this.spinner = ora(string).start();
    }

    stop() {
        if (this.spinner) {
            this.spinner.succeed();
            this.spinner = null;
            process.stdout.write('\n');
        }
    }
}

const loading = new Loading();
const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
})


// Main call
if (!process.argv[2]) {
    checkVersion();
} else if (process.argv[2] && (process.argv[2] === '-h' || process.argv[2] === '--help')) {
    displayHelp();
} else {
    displayError();
}

// Function which contains all the lint function
async function lintAll() {
    // Start
    let startTime = performance.now();
    loading.startLoading('Script Starting ');

    // Script
    loadingFlag('Checking let to const errors: ', 'start');
    let allErrors = await getAllLintErrors();
    await lintLetToConst(allErrors);
    loadingFlag('Checking missing Semicolons: ');
    allErrors = await getAllLintErrors();
    await lintMissingSemicolon(allErrors);
    loadingFlag('Checking double quotes to single quotes errors: ');
    allErrors = await getAllLintErrors();
    await lintDoubleQuoteToSingleQuote(allErrors);
    loadingFlag('Checking file not ending by an empty line: ');
    allErrors = await getAllLintErrors();
    await lintEndByNewLine(allErrors);
    loadingFlag('Checking unnecessarily quoted property: ');
    allErrors = await getAllLintErrors();
    await lintPropertyUnnecessarilyQuoted(allErrors);
    loadingFlag('Checking unnecessary semicolon: ');
    allErrors = await getAllLintErrors();
    await lintUnnecessarySemicolon(allErrors);

    // End
    loading.stop();
    let finishTime = performance.now();
    let timeScript = Math.round((finishTime - startTime) / 1000);
    console.log('\nLinting Finished');
    console.log(
        chalk.yellow('\nTime elapsed: ' + timeScript.toString() + 's')
    );
    process.exit(0);
}

// Exec 'ng lint' in the terminal to get all the lint errors
function getAllLintErrors() {
    return new Promise((resolve) => {
        exec('ng lint', (error, stdout, stderr) => {
            if (stdout) {
                if (angularCLIVersion <= 9) {
                    const allErrors = stdout.split('\n');
                    resolve(allErrors);
                } else {
                    const allErrors = parseAllErrors(stdout.split('\n'));
                    resolve(allErrors);
                }
            } else {
                console.log(stderr);
                process.exit(84);
            }
        });
    });
}

function parseAllErrors(allErrorsNewVersion) {
    let res = [];
    let home = null;

    for (let line of allErrorsNewVersion) {
        if (line[0] === '/') {
            let i = 0;
            for (; i < line.length; i++) {
                if (line[i] === ':') {
                    break;
                }
            }
            home = line.substring(0, i);
        }
        if (line[0] === 'E' && line[1] === 'R' && line[2] === 'R' && line[3] === 'O' && line[4] === 'R' && line[5] === ':') {
            line = line.substring(7, line.length);
            res.push('ERROR: ' + home + ':' + line);
        }
    }
    return res;
}

// -----------------------------------------All generic Functions-------------------------------------------------------- //

async function lintLetToConst(allErrors) {
    let letToConstErrors = allErrors.filter(line => line.includes("is never reassigned; use 'const' instead of 'let'."));
    if (letToConstErrors.length > 0) {
        for (const line of letToConstErrors) {
            await changeFileLet(line);
        }
    } else {
        loading.stop();
        console.log('\tNo error found !');
    }
}

async function lintMissingSemicolon(allErrors) {
    let missingSemicolonErrors = allErrors.filter(line => line.includes(" Missing semicolon"));
    if (missingSemicolonErrors.length > 0) {
        for (const line of missingSemicolonErrors) {
            await changeFileSemicolon(line);
        }
    } else {
        loading.stop();
        console.log('\tNo error found !');
    }
}

async function lintDoubleQuoteToSingleQuote(allErrors) {
    let doubleQuoteToSingleQuote = allErrors.filter(line => line.includes(`" should be '`));
    if (doubleQuoteToSingleQuote.length > 0) {
        for (const line of doubleQuoteToSingleQuote) {
            await changeFileDoubleQuote(line);
        }
    } else {
        loading.stop();
        console.log('\tNo error found !');
    }
}

async function lintEndByNewLine(allErrors) {
    let endByNewLine = allErrors.filter(line => line.includes(`file should end with a newline`));
    if (endByNewLine.length > 0) {
        for (const line of endByNewLine) {
            await changeFileEndNewLine(line);
        }
    } else {
        loading.stop();
        console.log('\tNo error found !');
    }
}

async function lintPropertyUnnecessarilyQuoted(allErrors) {
    let propertyUnnecessarilyQuoted = allErrors.filter(line => line.includes(`Unnecessarily quoted property`));
    if (propertyUnnecessarilyQuoted.length > 0) {
        for (const line of propertyUnnecessarilyQuoted) {
            await changeFilePropertyUnnecessarilyQuoted(line);
        }
    } else {
        loading.stop();
        console.log('\tNo error found !');
    }
}

async function lintUnnecessarySemicolon(allErrors) {
    let unnecessarySemicolon = allErrors.filter(line => line.includes(`Unnecessary semicolon`));
    if (unnecessarySemicolon.length > 0) {
        for (const line of unnecessarySemicolon) {
            await changeFileUnnecessarySemicolon(line);
        }
    } else {
        loading.stop();
        console.log('\tNo error found !');
    }
}

// ---------------------------------------------------------------------------------------------------------------------- //

function changeFileLet(line) {
    return new Promise((resolve) => {
        let path = getPath(line);
        fs.readFile(path, 'utf8', (err, data) => {
            if (err) {
                console.log('error', err);
                resolve();
            }
            let text = data.split('\n');
            let arrayLineColumn = getLineAndColumn(line);
            let nLine = arrayLineColumn[0] - 1;
            let nColumn = arrayLineColumn[1] - 1;
            text = letFunction(text, nLine, nColumn);
            fs.writeFile(path, text, (err) => {
                if (err) {
                    console.log(err);
                    resolve();
                }
                loading.stop();
                console.log(path + ' linted ! (l: ' + (nLine + 1).toString() + ' col: ' + (nColumn + 1).toString() + ')');
                resolve();
            });
        });
    })
}

function changeFileSemicolon(line) {
    return new Promise((resolve) => {
        let path = getPath(line);
        fs.readFile(path, 'utf8', (err, data) => {
            if (err) {
                console.log('error', err);
            }
            let text = data.split('\n');
            let arrayLineColumn = getLineAndColumn(line);
            let nLine = arrayLineColumn[0] - 1;
            let nColumn = arrayLineColumn[1] - 1;
            text = semicolonFunction(text, nLine, nColumn);
            fs.writeFile(path, text, (err) => {
                if (err) {
                    console.log(err);
                    resolve();
                }
                loading.stop();
                console.log(path + ' linted ! (l: ' + (nLine + 1).toString() + ' col: ' + (nColumn + 1).toString() +')');
                resolve();
            });
        });
    });
}

function changeFileDoubleQuote(line) {
    return new Promise((resolve) => {
        let path = getPath(line);
        fs.readFile(path, 'utf8', (err, data) => {
            if (err) {
                console.log('error', err);
            }
            let text = data.split('\n');
            let arrayLineColumn = getLineAndColumn(line);
            let nLine = arrayLineColumn[0] - 1;
            let nColumn = arrayLineColumn[1] - 1;
            text = doubleQuoteFunction(text, nLine, nColumn);
            fs.writeFile(path, text, (err) => {
                if (err) {
                    console.log(err);
                    resolve();
                }
                loading.stop();
                console.log(path + ' linted ! (l: ' + (nLine + 1).toString() + ' col: ' + (nColumn + 1).toString() +')');
                resolve();
            });
        });
    });
}

function changeFileEndNewLine(line) {
    return new Promise((resolve) => {
        let path = getPath(line);
        fs.readFile(path, 'utf8', (err, data) => {
            if (err) {
                console.log('error', err);
            }
            let text = data.split('\n');
            let arrayLineColumn = getLineAndColumn(line);
            let nLine = arrayLineColumn[0] - 1;
            let nColumn = arrayLineColumn[1] - 1;
            text = endByNewLineFunction(text, nLine, nColumn);
            fs.writeFile(path, text, (err) => {
                if (err) {
                    console.log(err);
                    resolve();
                }
                loading.stop();
                console.log(path + ' linted ! (l: ' + (nLine + 1).toString() + ' col: ' + (nColumn + 1).toString() + ')');
                resolve();
            });
        });
    });
}

function changeFilePropertyUnnecessarilyQuoted(line) {
    return new Promise((resolve) => {
        let path = getPath(line);
        fs.readFile(path, 'utf8', (err, data) => {
            if (err) {
                console.log('error', err);
            }
            let text = data.split('\n');
            let arrayLineColumn = getLineAndColumn(line);
            let nLine = arrayLineColumn[0] - 1;
            let nColumn = arrayLineColumn[1] - 1;
            text = propertyUnnecessarilyQuotedFunction(text, nLine, nColumn);
            fs.writeFile(path, text, (err) => {
                if (err) {
                    console.log(err);
                    resolve();
                }
                loading.stop();
                console.log(path + ' linted ! (l: ' + (nLine + 1).toString() + ' col: ' + (nColumn + 1).toString() + ')');
                resolve();
            });
        });
    });
}

function changeFileUnnecessarySemicolon(line) {
    return new Promise((resolve) => {
        let path = getPath(line);
        fs.readFile(path, 'utf8', (err, data) => {
            if (err) {
                console.log('error', err);
            }
            let text = data.split('\n');
            let arrayLineColumn = getLineAndColumn(line);
            let nLine = arrayLineColumn[0] - 1;
            let nColumn = arrayLineColumn[1] - 1;
            text = unnecessarySemicolonFunction(text, nLine, nColumn);
            fs.writeFile(path, text, (err) => {
                if (err) {
                    console.log(err);
                    resolve();
                }
                loading.stop();
                console.log(path + ' linted ! (l: ' + (nLine + 1).toString() + ' col: ' + (nColumn + 1).toString() + ')');
                resolve();
            });
        });
    });
}

function getPath(line) {
    let start = 0;
    for (; start < line.length; start++) {
        if (line[start] === '/') {
            break;
        }
    }
    for (let i = start; i < line.length; i++) {
        if (line[i] === ':') {
            return line.substring(start, i);
        }
    }
    return null;
}

function getLineAndColumn(line) {
    let startPath = 0;
    let start = 0;
    let end = 0;
    let res = 0;

    for (; startPath < line.length; startPath++) {
        if (line[startPath] === '/') {
            break;
        }
    }
    for (let i = startPath; i < line.length; i++) {
        if (line[i] === ':') {
            start = i;
            break;
        }
    }
    for (let i = start; i < line.length; i++) {
        if (line[i] === ' ') {
            end = i;
            break;
        }
    }
    res = line.substring(start + 1, end).split(':');
    return [res[0], res[1]];
}

function getExactLet(line, index) {
    for (let i = index; i > 0 && i > 2; i--) {
        if (line[i] === 't' && line[i - 1] === 'e' && line[i - 2] === 'l') {
            return i - 2;
        }
    }
    return 0;
}


function remplaceLetToConst(line, index) {
    return line.splice(index, 3, 'const');
}

function letFunction(text, nLine, nColumn) {
    const indexStartingLet = getExactLet(text[nLine], nColumn);
    text[nLine] = remplaceLetToConst(text[nLine], indexStartingLet);
    text = text.join('\n');
    return text;
}

function semicolonFunction(text, nLine, nColumn) {
    text[nLine] = text[nLine].splice(nColumn, 0, ';');
    text = text.join('\n');
    return text;
}

function doubleQuoteFunction(text, nLine, nColumn) {
    text[nLine] = text[nLine].splice(nColumn, 1, `'`);
    for (let i = nColumn + 1; i < text[nLine].length; i++) {
        if (text[nLine][i] === '"') {
            text[nLine] = text[nLine].splice(i, 1, `'`);
            break;
        }
    }
    text = text.join('\n');
    return text;
}

function endByNewLineFunction(text, nLine, nColumn) {
    text[nLine + 1] = '';
    text = text.join('\n');
    return text;
}

function propertyUnnecessarilyQuotedFunction(text, nLine, nColumn) {
    const char = text[nLine][nColumn];

    text[nLine] = text[nLine].splice(nColumn, 1, ``);
    for (let i = nColumn + 1; i < text[nLine].length; i++) {
        if (text[nLine][i] === char) {
            text[nLine] = text[nLine].splice(i, 1, ``);
            break;
        }
    }
    text = text.join('\n');
    return text;
}

function unnecessarySemicolonFunction(text, nLine, nColumn) {
    text[nLine] = text[nLine].splice(nColumn, 1, '');
    text = text.join('\n');
    return text;
}

String.prototype.splice = function(idx, rem, str) {
    return this.slice(0, idx) + str + this.slice(idx + Math.abs(rem));
};

function checkVersion() {
    fetch('https://api.github.com/repos/Mitix-EPI/MyLinter-angular/contents/version')
    .then(response => response.json())
    .then(data => {
        const ghVersion = base64.decode(data.content);
        if (ghVersion <= version) {
            checkAngularCLIVersion()
            .then(
                () => {
                    lintAll();
                },
                (error) => {
                    console.log('Error Angular CLI version');
                }
            );
        } else {
            console.log('WARNING : Not latest version of my_linter');
            console.log('actual version: ' + version, 'disponible version: ' + ghVersion + '\n');
            rl.question('Do you want to update my_linter ? [Y/N]', function(answer) {
                if (answer[0] === 'n' || answer[0] === 'N') {
                    rl.close();
                    lintAll();
                } else {
                    rl.close();
                    exec("git clone --depth=1 https://github.com/Mitix-EPI/MyLinter-angular && cd MyLinter-angular && sudo ./installer && cd .. && rm -rf MyLinter-angular", (error, stdout, stderr) => {
                        if (stdout) {
                            console.log('my_linter Updated ! You can use now the latest version');
                        } else {
                            console.log(stderr);
                            process.exit(84);
                        }
                    });
                }
            })
        }
    });
}

function checkAngularCLIVersion() {
    return new Promise((resolve, rejects) => {
        exec('ng --version', (error, stdout, stderr) => {
            if (stdout) {
                let tmp = stdout.split('\n');
                let line = tmp.filter(line => line.includes("Angular CLI: "))[0];
                angularCLIVersion = getVersionAngularCLI(line);
            } else {
                console.log(stderr);
                process.exit(84);
            }
        });
        resolve();
    })
}

function getVersionAngularCLI(line) {
    let start = 0;
    let end = 0;
    let res = 0;

    for (let i = 0; i < line.length; i++) {
        if (line[i] === ':') {
            start = i + 2; // to have directly the index of the first number
            break;
        }
    }
    for (let i = start; i < line.length; i++) {
        if (line[i] === '.') {
            end = i;
            break;
        }
    }
    res = parseInt(line.substring(start, end), 10);
    return res;
}

function loadingFlag(string, start) {
    loading.stop();
    if (!start) {
        process.stdout.write('\n');
    }
    loading.startLoading(string);
}

function displayHelp() {
    console.log('\n');
    console.log(
        chalk.red(
            figlet.textSync('My_Linter', { horizontalLayout: 'full' })
        )
    );
    console.log('\n\nUsage:\tmy_linter\n');
    console.log('You must be in an angular project\n');
    console.log("my_linter is an automatic corrector of several 'ng lint's errors.");
    console.log('This script is in beta. Updates come every week\n');
    console.log('You can contribute to the project by adding features or corrections\n');
    console.log('The Github Project:');
    console.log('https://github.com/Mitix-EPI/MyLinter-angular');
    console.log(
        chalk.yellow('\nlocal version: ' + version.toString())
    );
    process.exit(0);
}

function displayError() {
    console.log('Need help ?\nWrite my_linter --help');
    process.exit(84);
}
